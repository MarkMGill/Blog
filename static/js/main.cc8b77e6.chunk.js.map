{"version":3,"sources":["components/apis/jsonPlaceholder.js","components/actions/index.js","components/UserHeader.js","components/ShowComments.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducer.js","reducers/loveCounterArrReducer.js","reducers/showCommentBoxReducer.js","reducers/showCommentsReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceholder","get","response","type","payload","data","fetchUser","id","loveCounterArr","index","getState","loveCountArr","length","posts","map","post","el","ind","showCommentBoxFunc","newArr","showCommentBoxArr","forEach","showCommentsFunc","comment","showCommentsArr","UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","userId","ShowComments","undefined","comments","key","PostList","onCommentSubmit","event","preventDefault","setState","iStyle","cursor","fetchPostsAndUsers","heartCount","title","body","onClick","style","heart","onSubmit","value","onChange","e","target","renderList","_","uniq","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.cc8b77e6.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://jsonplaceholder.typicode.com\"\r\n});\r\n\r\n","import jsonPlaceholder from '../apis/jsonPlaceholder';\r\nimport _ from 'lodash';\r\n\r\nexport const fetchPostsAndUsers = id => async (dispatch, getState) => {\r\n    await dispatch(fetchPosts());\r\n    await dispatch(loveCounterArr());\r\n    await dispatch(showCommentBoxFunc());\r\n    await dispatch(showCommentsFunc());\r\n    \r\n    const userIDs = _.uniq(_.map(getState().posts, 'userId'));\r\n    userIDs.forEach(id => dispatch(fetchUser(id)));\r\n};\r\n\r\nexport const fetchPosts = () => async dispatch => {\r\n    const response = await jsonPlaceholder.get('/posts');\r\n    \r\n    dispatch({type: 'FETCH_POSTS', payload: response.data});\r\n};\r\n\r\nexport const fetchUser = id => async dispatch => {\r\n    const response = await jsonPlaceholder.get(`/users/${id}`);\r\n\r\n    dispatch({ type: 'FETCH_USER', payload: response.data });\r\n};\r\n\r\nexport const loveCounterArr = (index) => (dispatch, getState) => {\r\n    var newArr = [];\r\n    if(getState().loveCountArr.length === 0) {\r\n        newArr = getState().posts.map(post => {\r\n            return 0;\r\n        });\r\n    } else {\r\n        newArr = getState().loveCountArr.map((el, ind) => {\r\n            return (ind === index) ? (el + 1) : el;\r\n        });\r\n    }\r\n    \r\n    dispatch({ type: 'LOVE_COUNT_ARR', payload: newArr });\r\n};\r\n\r\nexport const showCommentBoxFunc = (index) => (dispatch, getState) => {\r\n    \r\n    var newArr = [];\r\n    if(getState().showCommentBoxArr.length === 0) {\r\n        newArr = getState().posts.map(post => {\r\n            return 'd-none';\r\n        });\r\n    } else {\r\n        newArr = getState().showCommentBoxArr.map(el => {\r\n            return el;\r\n        });\r\n        newArr.forEach((el, ind) => {\r\n            if(ind === index) {\r\n                if(el === 'd-none') {\r\n                    newArr[ind] = 'd-block mt-1';\r\n                } else {\r\n                    newArr[ind] = 'd-none';\r\n                }\r\n            } else {\r\n                newArr[ind] = 'd-none';\r\n            }\r\n        });\r\n    }\r\n   \r\n    dispatch({ type: 'SHOW_COMMENT_BOX', payload: newArr });\r\n}\r\n\r\nexport const showCommentsFunc = (index, comment) => (dispatch, getState) => {\r\n\r\n    var newArr = [];\r\n    \r\n    if(getState().showCommentsArr.length === 0) {\r\n        getState().posts.forEach(() => {\r\n            newArr = [...newArr, []];\r\n        });\r\n    } else {\r\n        newArr = getState().showCommentsArr.map((el, ind) => {\r\n            return (ind === index) ? [...el, comment] : el;\r\n        });\r\n    }\r\n    \r\n    dispatch({ type: 'SHOW_COMMENTS', payload: newArr });\r\n}\r\n\r\n \r\n// memoize version\r\n//export const fetchUser = id => dispatch => _fetchUser(id, dispatch); \r\n//const _fetchUser = _.memoize(async(id, dispatch) => {\r\n    //const response = await jsonPlaceholder.get(`/users/${id}`);\r\n\r\n    //dispatch({ type: 'FETCH_USER', payload: response.data });\r\n//});\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass UserHeader extends React.Component {\r\n\r\n    render() {\r\n        const {user} = this.props;\r\n\r\n        if(!user) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"header mb-1\">{user.name}</div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return { user: state.users.find(user => user.id === ownProps.userId) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserHeader);\r\n","import React from 'react';\r\n\r\nconst ShowComments = ({showCommentsArr, index}) => {\r\n    \r\n    if(showCommentsArr[index] === undefined) {\r\n        return null;\r\n    } else {\r\n        \r\n        const comments = showCommentsArr[index].map(comment => {\r\n            \r\n            return <p key={index} className=\"lead rounded bg-light mb-1 py-1 pl-1\">{comment}</p>;\r\n    \r\n        });\r\n        return <div>{comments}</div>;\r\n    }\r\n    \r\n};\r\n\r\nexport default ShowComments;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPostsAndUsers, loveCounterArr, showCommentBoxFunc, showCommentsFunc } from './actions/';\r\nimport UserHeader from './UserHeader';\r\nimport ShowComments from './ShowComments';\r\n\r\nclass PostList extends React.Component {\r\n\r\n    state = { index: null, comment: '' };\r\n\r\n    componentDidMount() {\r\n        this.props.fetchPostsAndUsers();\r\n    }\r\n\r\n    onCommentSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.comment !== '') {\r\n            this.props.showCommentsFunc(this.state.index, this.state.comment);\r\n        }\r\n        this.setState({ comment: '' })\r\n    }\r\n\r\n    iStyle = {\r\n        cursor: 'pointer'\r\n    }\r\n\r\n    heart(heartCount) {\r\n        return (heartCount === 0) ? 'far fa-heart' : 'fas fa-heart';\r\n    }\r\n\r\n    renderList() {\r\n        return this.props.posts.map((post, index) => {\r\n            return (\r\n                <div className=\"item\" key={post.id}>\r\n                    <i className=\"large middle aligned icon user\" />\r\n                    <div className=\"content mb-1\">\r\n                        <div className=\"description\">\r\n                            <h2>{post.title}</h2>\r\n                            <p className=\"mb-1 lead\">{post.body}</p>\r\n                        </div>\r\n                        <UserHeader userId={post.userId} />\r\n                        <div className=\"mb-1\">\r\n                            <div className=\"d-inline mx-2\" onClick={() => this.props.loveCounterArr(index)} style={this.iStyle}>\r\n                                <i className={this.heart(this.props.loveCountArr[index])}></i>\r\n                            </div>\r\n                            <div className=\"d-inline mx-2\">{(this.props.loveCountArr[index] === 0) ? null : this.props.loveCountArr[index]}</div>\r\n                            <div onClick={() => this.props.showCommentBoxFunc(index)} className=\"d-inline mx-2\" style={this.iStyle}>\r\n                                <i className=\"far fa-comment\"></i>\r\n                            </div>\r\n                            <form onSubmit={this.onCommentSubmit}> \r\n                            <div className={this.props.showCommentBoxArr[index]}>\r\n                                <div className=\"input-group\">\r\n                                <input className=\"form-control\" type=\"text\" value={this.state.comment} onChange={ e => this.setState({ index: index, comment: e.target.value })}></input>\r\n                                <div className=\"input-group-append\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n                        </div>\r\n                        <ShowComments showCommentsArr={this.props.showCommentsArr} index={index} />\r\n                    </div>\r\n                </div> \r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        \r\n        return <div className=\"ui relaxed divided list\">{this.renderList()}</div>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { posts: state.posts, loveCountArr: state.loveCountArr, showCommentBoxArr: state.showCommentBoxArr, showCommentsArr: state.showCommentsArr };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPostsAndUsers, loveCounterArr, showCommentBoxFunc, showCommentsFunc })(PostList);\r\n","import React from 'react';\r\nimport PostList from './PostList'\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"container mt-2\">\r\n            <div className=\"jumbotron text-center\">\r\n                <h1 className=\"display-4\">Welcome To Mark's Awesome Blog!</h1>\r\n                <p className=\"lead\">Talk about anything you want to! Mixed-Martial Arts, Funny Movies, or Web Programming!</p>\r\n            </div>\r\n            <div>\r\n                <PostList />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import { combineReducers } from 'redux';\r\nimport postsReducer from './postsReducer';\r\nimport usersReducer from './usersReducer';\r\nimport loveCounterArrReducer from './loveCounterArrReducer';\r\nimport showCommentBoxReducer from './showCommentBoxReducer';\r\nimport showCommentsReducer from './showCommentsReducer';\r\n\r\nexport default combineReducers({  \r\n    posts: postsReducer, \r\n    users: usersReducer,\r\n    loveCountArr: loveCounterArrReducer,\r\n    showCommentBoxArr: showCommentBoxReducer,\r\n    showCommentsArr: showCommentsReducer\r\n});","export default (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'FETCH_POSTS':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","export default (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'FETCH_USER':\r\n            return [...state, action.payload];\r\n        default: \r\n            return state;\r\n    }\r\n}","export default (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'LOVE_COUNT_ARR':\r\n            return action.payload;\r\n        default: \r\n            return state;\r\n    }\r\n}","export default (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'SHOW_COMMENT_BOX':\r\n            return action.payload;\r\n        default: \r\n            return state;\r\n    }\r\n}","export default (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'SHOW_COMMENTS':\r\n            return action.payload;\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport App from './components/App';\r\nimport reducers from './reducers/';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}